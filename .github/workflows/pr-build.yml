name: PR Build Status Check

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    name: 🛠️ 프로젝트 빌드
    runs-on: ubuntu-latest
    outputs:
      storybook_test_result: ${{ steps.test_results.outputs.storybook_test_result }}

    steps:
      # ✅ PR 브랜치 코드 체크아웃
      - uses: actions/checkout@v3

      # ✅ pnpm 설치
      - name: pnpm 설치
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # ✅ Node.js 설치
      - name: Node.js 설치
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # ✅ 의존성 설치
      - name: 패키지 설치
        run: pnpm install

      # ✅ Next.js 빌드 실행
      - name: 🔨 Next.js 빌드
        id: nextbuild
        run: |
          set -o pipefail
          pnpm build 2>&1 | tee build.log

      # ✅ Storybook을 정적으로 빌드 (storybook-static 폴더에 출력)
      - name: 📦 Storybook 정적 빌드
        run: pnpm build-storybook -o storybook-static

      # ✅ Storybook 서버 실행 및 응답 대기 (최대 5분, 5초마다 상태 출력)
      - name: 🚀 Storybook 서버 실행 및 대기
        run: |
          npx serve storybook-static --no-clipboard -l 6006 > storybook-server.log 2>&1 &
          for i in {1..60}; do
            if curl -s http://localhost:6006 > /dev/null; then
              echo "✅ Storybook 서버가 실행되었습니다!"
              break
            else
              echo "⏳ Storybook 서버 대기 중... ($i/60)"
              sleep 5
            fi
          done

      # ✅ Playwright 브라우저 설치
      - name: 🎭 Playwright 브라우저 설치
        run: pnpm exec playwright install --with-deps chromium

      # ✅ Storybook 테스트 실행 (정적 서버에 대해)
      - name: 🧪 Storybook 테스트 실행
        id: storybooktest
        run: |
          pnpm test-storybook --url http://localhost:6006 2>&1 | tee storybook-test.log

      # ❌ 실패한 경우 로그에서 오류 요약 추출
      - name: 📋 오류 요약 추출
        id: error
        if: failure()
        run: |
          echo "📦 오류 로그 요약을 추출합니다..."
          tail -n 50 build.log storybook-test.log > error-tail.log
          SUMMARY=$(grep -i -E "error|failed|unexpected|cannot|not found" error-tail.log | tail -n 10 | sed 's/^/> /')
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 테스트 결과를 outputs에 저장
      - name: 테스트 결과 저장
        if: always()
        id: test_results
        run: echo "storybook_test_result=${{ steps.storybooktest.outcome }}" >> $GITHUB_OUTPUT

  comment:
    name: 💬 PR에 결과 댓글 작성
    runs-on: ubuntu-latest
    needs: build

    steps:
      # ✅ PR에 결과 댓글 작성 (성공/실패 모두 처리)
      - name: 결과 댓글 작성
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: build-status
          message: |
            ${{ needs.build.result == 'success' && '✅ **Next.js & Storybook 빌드 및 테스트 성공** 🎉' || '❌ **빌드 또는 테스트 실패**' }}

            ### 📊 빌드 및 테스트 요약

            - **Next.js Build**: ${{ needs.build.result == 'success' && '✅ 성공' || '❌ 실패' }}
            - **Storybook 테스트 실행**: ${{ needs.build.outputs.storybook_test_result == 'success' && '✅ 성공' || '❌ 실패' }}

            ${{ steps.error.outputs.summary && format('**오류 요약:**\n```\n{0}\n```', steps.error.outputs.summary) }}

            > 🔁 로컬에서 재현하려면 아래 명령어를 실행해보세요:
            ```bash
            pnpm install
            pnpm build
            pnpm build-storybook -o storybook-static
            npx serve storybook-static -l 6006
            pnpm test-storybook --url http://localhost:6006
            ```
